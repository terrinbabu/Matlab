clc;
clear all;
close all;

%% Dictionary

% experiment

org = 1;
pibpf = 2;
pikf = 3;
pizpf = 4;

% ros topics

it  = 1;
ft  = 2;
et  = 3;
mjs = 4;
rt  = 5;
vt  = 6;

% time,position,velocity,torque,accelearation

seq = 1;
t = 2;

j1_q = 3; j1_Dq = 9;  j1_t = 15; j1_DDq = 21;
j2_q = 4; j2_Dq = 10; j2_t = 16; j2_DDq = 22;
j3_q = 5; j3_Dq = 11; j3_t = 17; j3_DDq = 23;
j4_q = 6; j4_Dq = 12; j4_t = 18; j4_DDq = 24;
j5_q = 7; j5_Dq = 13; j5_t = 19; j5_DDq = 25;
j6_q = 8; j6_Dq = 14; j6_t = 20; j6_DDq = 26;

%% storing all the topic values 

value = {}; % stores all the topics from all the txt files

path = '/home/terrin/projects/virtual_force_sensor/files/log_filtering/zero_phase_filter/0kg_all/';

value{org,it} = importdata(strcat(path,'ijt_org.txt'));
value{org,ft} = importdata(strcat(path,'fjt_org.txt'));
value{org,et} = importdata(strcat(path,'ejt_org.txt'));
value{org,mjs} = importdata(strcat(path,'mjt_org.txt'));
value{org,rt} = importdata(strcat(path,'rjt_org.txt'));
value{org,vt} = importdata(strcat(path,'vf_org.txt'));

value{pibpf,it} = importdata(strcat(path,'ijt_pibpf.txt'));
value{pibpf,ft} = importdata(strcat(path,'fjt_pibpf.txt'));
value{pibpf,et} = importdata(strcat(path,'ejt_pibpf.txt'));
value{pibpf,mjs} = importdata(strcat(path,'mjt_pibpf.txt'));
value{pibpf,rt} = importdata(strcat(path,'rjt_pibpf.txt'));
value{pibpf,vt} = importdata(strcat(path,'vf_pibpf.txt'));

value{pikf,it} = importdata(strcat(path,'ijt_pikf.txt'));
value{pikf,ft} = importdata(strcat(path,'fjt_pikf.txt'));
value{pikf,et} = importdata(strcat(path,'ejt_pikf.txt'));
value{pikf,mjs} = importdata(strcat(path,'mjt_pikf.txt'));
value{pikf,rt} = importdata(strcat(path,'rjt_pikf.txt'));
value{pikf,vt} = importdata(strcat(path,'vf_pikf.txt'));

value{pizpf,it} = importdata(strcat(path,'ijt_pizpf_bpf.txt'));
value{pizpf,ft} = importdata(strcat(path,'fjt_pizpf_bpf.txt'));
value{pizpf,et} = importdata(strcat(path,'ejt_pizpf_bpf.txt'));
value{pizpf,mjs} = importdata(strcat(path,'mjt_pizpf_bpf.txt'));
value{pizpf,rt} = importdata(strcat(path,'rjt_pizpf_bpf.txt'));
value{pizpf,vt} = importdata(strcat(path,'vf_pizpf_bpf.txt'));

%% changing the start time stamp value to O

bags = {value{org,:},value{pibpf,:},value{pikf,:},value{pizpf,:}}; % same rosbag file

size_bags = size(bags);
start_time = zeros(1,size_bags(1));

for i=1:size_bags(1)
    
start_time(i) = bags{i,1}.data(1,t); % 1st time stamp 

    for j=1:size_bags(2)
        if( bags{i,j}.data(1,t)  < start_time(i) )
            start_time(i) = bags{i,j}.data(1,t); 
        end
    end
end


for i=1:size_bags(1)
    for j=1:size_bags(2)
        bags{i,j}.data(:,2) = bags{i,j}.data(:,2)-start_time(i);
    end
end

size_values = size(value);

for i=1:size_values(2)
    
value{org,i}.data(:,2) = value{org,i}.data(:,2) - start_time(1);
value{pibpf,i}.data(:,2) = value{pibpf,i}.data(:,2) - start_time(1);
value{pikf,i}.data(:,2) = value{pikf,i}.data(:,2) - start_time(1);
value{pizpf,i}.data(:,2) = value{pizpf,i}.data(:,2) - start_time(1);

end

j_t = j2_t;

%% torques 

% inertial 

figure ('Name','inertial tau')
subplot(3,1,1)
hold on
plot(value{org,it}.data(:,t),value{org,it}.data(:,j_t))
plot(value{pibpf,it}.data(:,t),value{pibpf,it}.data(:,j_t))
legend('org','pibpf')
subplot(3,1,2)
hold on
plot(value{org,it}.data(:,t),value{org,it}.data(:,j_t))
plot(value{pikf,it}.data(:,t),value{pikf,it}.data(:,j_t))
legend('org','pikf')
subplot(3,1,3)
hold on
plot(value{org,it}.data(:,t),value{org,it}.data(:,j_t))
plot(value{pizpf,it}.data(:,t),value{pizpf,it}.data(:,j_t))
legend('org','pizpf')

% frictional

figure ('Name','friction tau')
subplot(3,1,1)
hold on
plot(value{org,ft}.data(:,t),value{org,ft}.data(:,j_t))
plot(value{pibpf,ft}.data(:,t),value{pibpf,ft}.data(:,j_t))
legend('org','pibpf')
subplot(3,1,2)
hold on
plot(value{org,ft}.data(:,t),value{org,ft}.data(:,j_t))
plot(value{pikf,ft}.data(:,t),value{pikf,ft}.data(:,j_t))
legend('org','pikf')
subplot(3,1,3)
hold on
plot(value{org,ft}.data(:,t),value{org,ft}.data(:,j_t))
plot(value{pizpf,ft}.data(:,t),value{pizpf,ft}.data(:,j_t))
legend('org','pizpf')

% estimated

figure ('Name','estimated tau')
subplot(3,1,1)
hold on
plot(value{org,et}.data(:,t),value{org,et}.data(:,j_t))
plot(value{pibpf,et}.data(:,t),value{pibpf,et}.data(:,j_t))
legend('org','pibpf')
subplot(3,1,2)
hold on
plot(value{org,et}.data(:,t),value{org,et}.data(:,j_t))
plot(value{pikf,et}.data(:,t),value{pikf,et}.data(:,j_t))
legend('org','pikf')
subplot(3,1,3)
hold on
plot(value{org,et}.data(:,t),value{org,et}.data(:,j_t))
plot(value{pizpf,et}.data(:,t),value{pizpf,et}.data(:,j_t))
legend('org','pizpf')

% residual 

figure ('Name','residual tau')
subplot(3,1,1)
hold on
plot(value{org,rt}.data(:,t),value{org,rt}.data(:,j_t))
plot(value{pibpf,rt}.data(:,t),value{pibpf,rt}.data(:,j_t))
legend('org','pibpf')
subplot(3,1,2)
hold on
plot(value{org,rt}.data(:,t),value{org,rt}.data(:,j_t))
plot(value{pikf,rt}.data(:,t),value{pikf,rt}.data(:,j_t))
legend('org','pikf')
subplot(3,1,3)
hold on
plot(value{org,rt}.data(:,t),value{org,rt}.data(:,j_t))
plot(value{pizpf,rt}.data(:,t),value{pizpf,rt}.data(:,j_t))
legend('org','pizpf')

% measured Vs estimated

figure ('Name','org measured Vs estimated tau')
subplot(2,2,1)
hold on
plot(value{org,mjs}.data(:,t),value{org,mjs}.data(:,j_t))
plot(value{org,et}.data(:,t),value{org,et}.data(:,j_t))
legend('measured org','estimated org')
subplot(2,2,2)
hold on
plot(value{org,mjs}.data(:,t),value{org,mjs}.data(:,j_t))
plot(value{pibpf,et}.data(:,t),value{pibpf,et}.data(:,j_t))
legend('measured org','estimated pibpf')
subplot(2,2,3)
hold on
plot(value{org,mjs}.data(:,t),value{org,mjs}.data(:,j_t))
plot(value{pikf,et}.data(:,t),value{pikf,et}.data(:,j_t))
legend('measured org','estimated pikf')
subplot(2,2,4)
hold on
plot(value{org,mjs}.data(:,t),value{org,mjs}.data(:,j_t))
plot(value{pizpf,et}.data(:,t),value{pizpf,et}.data(:,j_t))
legend('measured org','estimated pizpf')

% org measured () Vs estimated org

figure ('Name','org measured Vs estimated tau')
hold on
plot(value{org,mjs}.data(:,t),value{org,mjs}.data(:,j_t))
plot(value{org,et}.data(:,t),value{org,et}.data(:,j_t))
legend('measured org','estimated org')


%% divided plots

figure ('Name','org measured Vs estimated tau')
subplot(2,2,1)
hold on
plot(value{org,mjs}.data(:,t),value{org,mjs}.data(:,j_t))
plot(value{pizpf,et}.data(:,t),value{pizpf,et}.data(:,j_t))
legend('measured','estimated')
title('Trajectory 1')
subplot(2,2,2)
hold on
plot(value{org,mjs}.data(:,t),value{org,mjs}.data(:,j_t))
plot(value{pizpf,et}.data(:,t),value{pizpf,et}.data(:,j_t))
legend('measured','estimated')
title('Trajectory 1')
subplot(2,2,3)
hold on
plot(value{org,mjs}.data(:,t),value{org,mjs}.data(:,j_t))
plot(value{pizpf,et}.data(:,t),value{pizpf,et}.data(:,j_t))
legend('measured','estimated')
subplot(2,2,4)
hold on
plot(value{org,mjs}.data(:,t),value{org,mjs}.data(:,j_t))
plot(value{pizpf,et}.data(:,t),value{pizpf,et}.data(:,j_t))
legend('measured','estimated')
